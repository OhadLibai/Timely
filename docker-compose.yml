# docker-compose.yml - UNIFIED for ML Demo Focus
version: '3.8'

services:
  # PostgreSQL Database
  db:
    container_name: timely-db
    image: postgres:13
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${DB_EXPOSED_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - timely-network

  # Database Initialization Service
  init-db:
    container_name: timely-init-db
    build:
      context: ./database
      dockerfile: Dockerfile
    volumes:
      - ./ml-service/training-data:/app/training-data:ro
      - ./backend/src:/app/backend/src:ro # Mount backend models for type consistency
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - timely-network

  # Node.js Backend API (Single Gateway)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timely-backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${BACKEND_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ML_SERVICE_URL=${ML_SERVICE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      db:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped
    networks:
      - timely-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python ML Service
  ml-service:
    container_name: timely-ml-service
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app
      - MODEL_PATH_BASE=${MODEL_PATH_BASE}
      - PROCESSED_DATA_PATH=${PROCESSED_DATA_PATH}
      - RAW_DATA_PATH=${RAW_DATA_PATH}
      - EVALUATION_SAMPLE_SIZE=${EVALUATION_SAMPLE_SIZE}
    ports:
      - "${ML_SERVICE_PORT}:${ML_SERVICE_PORT}"
    depends_on:
      db:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    volumes:
      - ./ml-service:/app
      - ./ml-service/models:/app/models:ro
    restart: unless-stopped
    networks:
      - timely-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ML_SERVICE_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend (served by Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: timely-frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - timely-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  timely-network:
    driver: bridge