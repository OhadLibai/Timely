version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: timely-postgres
    environment:
      POSTGRES_DB: timely_db
      POSTGRES_USER: timely_user
      POSTGRES_PASSWORD: timely_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timely_user -d timely_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: timely-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timely-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://timely_user:timely_password@postgres:5432/timely_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      ML_SERVICE_URL: http://ml-service:8000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    command: npm start

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: timely-ml-service
    environment:
      DATABASE_URL: postgresql://timely_user:timely_password@postgres:5432/timely_db
      REDIS_URL: redis://redis:6379
      MODEL_PATH: /app/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/data:/app/data
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:5000/api
        REACT_APP_ML_URL: http://localhost:8000/api
    container_name: timely-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
      - ml-service
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf

  # Database Migration Service
  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timely-migrate
    environment:
      DATABASE_URL: postgresql://timely_user:timely_password@postgres:5432/timely_db
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run migrate
    restart: "no"

  # Data Seeder Service
  seed:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timely-seed
    environment:
      DATABASE_URL: postgresql://timely_user:timely_password@postgres:5432/timely_db
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: npm run seed
    restart: "no"

  # ML Model Training Service (run once)
  train-model:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: timely-train-model
    environment:
      DATABASE_URL: postgresql://timely_user:timely_password@postgres:5432/timely_db
      MODEL_PATH: /app/models
    depends_on:
      seed:
        condition: service_completed_successfully
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/data:/app/data
    command: python -m src.training.train_model
    restart: "no"

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: timely-network