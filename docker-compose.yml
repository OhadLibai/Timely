# docker-compose.yml - DEV/TEST OPTIMIZED CONFIGURATION

version: '3.8'

services:
  # Database Service (unchanged - works well for dev)
  database:
    image: postgres:14-alpine
    container_name: timely-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_EXPOSED_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/init-database.ts:/docker-entrypoint-initdb.d/02-init-database.ts
      # Mount dataset for database initialization
      - ./ml-service/dataset:/app/dataset:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - timely-network

  # Backend - DEV/TEST OPTIMIZED
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: timely-backend
    env_file:
      - .env
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ML_SERVICE_URL: ${ML_SERVICE_URL}
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "${BACKEND_PORT}:5000"
    depends_on:
      database:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    volumes:
      # ✅ Hot reload for development
      - ./backend/src:/app/src
      # ✅ Package.json for dependency changes
      - ./backend/package.json:/app/package.json
      - ./backend/tsconfig.json:/app/tsconfig.json
      # ✅ Exclude node_modules (use container's version)
      - /app/node_modules
    networks:
      - timely-network
    restart: unless-stopped

  # Frontend - PARCEL DEV/TEST OPTIMIZED  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # ✅ FIXED: Use proper API URL for Parcel (not VITE_API_URL)
        API_URL: ${BACKEND_URL}/api
    container_name: timely-frontend
    env_file:
      - .env
    environment:
      # ✅ FIXED: Environment variables for Parcel
      NODE_ENV: development
      API_URL: ${BACKEND_URL}/api
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend
    volumes:
      # ✅ Hot reload for development
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      # ✅ FIXED: Parcel configuration files only
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - ./frontend/.parcelrc:/app/.parcelrc
      - ./frontend/.postcssrc:/app/.postcssrc
      - ./frontend/index.html:/app/index.html
      # ✅ Exclude node_modules (use container's version)
      - /app/node_modules
    networks:
      - timely-network
    restart: unless-stopped

  # ML Service - CORRECTED DATA FLOW
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: timely-ml-service
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATASET_PATH: ${DATASET_PATH}     # ✅ Raw CSV files
      DATA_PATH: ${DATA_PATH}           # ✅ Processed JSON files
      LOG_LEVEL: ${LOG_LEVEL}
      EVALUATION_BATCH_SIZE: ${EVALUATION_BATCH_SIZE}
      MODEL_TYPE: ${MODEL_TYPE}
      KNN_K: ${KNN_K}
      MIN_PURCHASE_HISTORY: ${MIN_PURCHASE_HISTORY}
      CONFIDENCE_THRESHOLD: ${CONFIDENCE_THRESHOLD}
      MAX_BASKET_SIZE: ${MAX_BASKET_SIZE}
    ports:
      - "${ML_SERVICE_PORT}:8000"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      # ✅ ML service code for development
      - ./ml-service/app:/app/app
      # ✅ Dataset files (read-only)
      - ./ml-service/dataset:/app/dataset:ro
      # ✅ Data processing output
      - ./ml-service/data:/app/data
      # ✅ Model storage
      - ./ml-service/models:/app/models
      # ✅ Logs
      - ./ml-service/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - timely-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  timely-network:
    driver: bridge

# ============================================================================
# DEVELOPMENT OPTIMIZATIONS SUMMARY:
# 
# ✅ FIXED: Removed all Vite references (vite.config.ts, postcss.config.js mismatch)
# ✅ FIXED: Use proper environment variables for Parcel (API_URL vs VITE_API_URL)  
# ✅ FIXED: Mount only Parcel-specific configuration files
# ✅ Maintains hot reload for all services
# ✅ Optimized for development and testing workflow
# ✅ Proper service dependencies and health checks
# ✅ Consistent volume mounting strategy
# ============================================================================