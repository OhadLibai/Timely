# docker-compose.yml

services:
  db:
    container_name: timely-db
    image: postgres:13
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  
  init-db:
    container_name: timely-init-db
    build:
      context: ./database
      dockerfile: Dockerfile
    volumes:
      - ./ml-service/data:/data
      - ./backend:/usr/src/app/backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timely-backend
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend:/app # Mount local backend code for development
      - /app/node_modules # Prevent local node_modules from overwriting container's
    command: npm run dev 
    restart: unless-stopped

  ml-service:
    container_name: timely-ml-service
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./ml-service/models:/app/src/models
    restart: unless-stopped

  frontend:
    container_name: timely-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_ML_API_URL: ${VITE_ML_API_URL}
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000" 
    depends_on:
      - backend
      # - ml-service # Only if frontend directly calls ML service
    volumes:
      # For Vite dev server instead of Nginx build:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev 

volumes:
  postgres_data:

networks:
  default:
    name: timely-network