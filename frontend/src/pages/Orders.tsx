// frontend/src/pages/Orders.tsx
// UPDATED: Added AutoGenerateBasket component as button variant in header actions
// PHASE 1: AutoGenerateBasket Integration Fix

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  Eye, Calendar, Package, ShoppingCart, Filter
} from 'lucide-react';
import { useOrders } from '@/hooks';
import { AsyncStateWrapper, StatusIndicator } from '@/components/common';
import EmptyState from '@/components/common/EmptyState';
import { PageHeader } from '@/components/common/PageHeader';
import { Button } from '@/components/common/Button';
import { AnimatedContainer } from '@/components/common/AnimatedContainer';
// ✅ ADDED: Import AutoGenerateBasket component
import AutoGenerateBasket from '@/components/predictions/AutoGeneratedBasket';
import { formatOrderNumber, formatPrice } from '@/utils/formatters';
import { useCartStore } from '@/stores/cart.store';

const Orders: React.FC = () => {
  const navigate = useNavigate();
  const [statusFilter, setStatusFilter] = useState<'all' | 'pending' | 'confirmed' | 'completed' | 'cancelled'>('all');
  const { addMultipleItems } = useCartStore();

  const { data: ordersResponse, isLoading, error, refetch } = useOrders({
    status: statusFilter !== 'all' ? statusFilter : undefined,
    limit: 50 // Get more orders like Products does
  });

  const orders = ordersResponse?.orders || [];

  // No client-side filtering needed - backend handles it
  const filteredOrders = orders;

  // Status counts would ideally come from backend, but for now calculate from all orders
  const { data: allOrdersResponse } = useOrders({ limit: 100 }); // Separate query for counts
  const allOrders = allOrdersResponse?.orders || [];
  const statusCounts = allOrders.reduce((acc, order) => {
    acc[order.status] = (acc[order.status] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // ✅ ADDED: Handle navigation for AutoGenerateBasket component
  const handleNavigate = (path: string) => {
    navigate(path);
  };

  // Handle reorder functionality
  const handleReorder = (order: any) => {
    const cartItems = order.items.map((item: any) => ({
      product: item.product,
      quantity: item.quantity
    }));
    
    addMultipleItems(cartItems);
    navigate('/cart');
  };

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      <PageHeader
        title="Order History"
        description="View your past orders and reorder your favorite items"
        icon={Package}
        actions={
          <div className="flex items-center gap-3">
            {/* ✅ ADDED: AutoGenerateBasket button variant */}
            <AutoGenerateBasket 
              variant="button"
              onNavigate={handleNavigate}
              className="flex-shrink-0"
            />
            
            {allOrders.length > 0 && (
              <Button variant="outline" icon={Filter}>
                Filter Orders
              </Button>
            )}
          </div>
        }
      />

      {/* Status Filter - Always visible when we have data */}
      {allOrdersResponse && (
        <div className="mb-6">
          <div className="flex flex-wrap gap-2">
            {[
              { key: 'all', label: 'All Orders', count: allOrders.length },
              { key: 'pending', label: 'Pending', count: statusCounts.pending || 0 },
              { key: 'confirmed', label: 'Confirmed', count: statusCounts.confirmed || 0 },
              { key: 'completed', label: 'Completed', count: statusCounts.completed || 0 },
              { key: 'cancelled', label: 'Cancelled', count: statusCounts.cancelled || 0 }
            ].map(({ key, label, count }) => (
              <Button
                key={key}
                onClick={() => setStatusFilter(key as any)}
                variant={statusFilter === key ? 'primary' : 'outline'}
                size="sm"
              >
                {label} ({count})
              </Button>
            ))}
          </div>
        </div>
      )}

      <AsyncStateWrapper
        loading={isLoading}
        error={error}
        data={orders}
        onRetry={refetch}
        isEmpty={!isLoading && (!orders || orders.length === 0)}
        emptyState={
          <EmptyState
            icon={Package}
            title="No orders yet"
            description="Start shopping to see your order history here."
            action={{
              label: "Browse Products",
              onClick: () => navigate('/products')
            }}
          />
        }
        errorTitle="Failed to load orders"
        errorDescription="Something went wrong while fetching your orders."
      >
        {/* Orders List */}
        <div className="space-y-4">
          {filteredOrders.map((order, index) => (
          <AnimatedContainer
            key={order.id}
            preset="fadeInUp"
            delay={index * 0.1}
            className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow"
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    Order {formatOrderNumber(order.orderNumber)}
                  </h3>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Calendar size={14} />
                    <span>{order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}</span>
                    <span>•</span>
                    <span>{order.items.length} items</span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <StatusIndicator
                  status={order.status as any}
                  variant="pill"
                  size="sm"
                />
                
                <div className="text-right">
                  <div className="text-lg font-semibold text-gray-900">
                    {formatPrice(order.total)}
                  </div>
                  <div className="text-sm text-gray-600">
                    {order.paymentStatus === 'completed' ? 'Paid' : 'Pending Payment'}
                  </div>
                </div>
                
                <Link to={`/orders/${order.id}`}>
                  <Button
                    variant="outline"
                    size="sm"
                    icon={Eye}
                  >
                    View Details
                  </Button>
                </Link>
              </div>
            </div>

            {/* Order Items Preview */}
            <div className="border-t border-gray-200 pt-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {order.items.slice(0, 3).map((item) => (
                  <div key={item.id} className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
                      {item.product.imageUrl ? (
                        <img 
                          src={item.product.imageUrl} 
                          alt={item.product.name}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            // Fallback to Package icon if image fails to load
                            const target = e.target as HTMLImageElement;
                            target.style.display = 'none';
                            target.parentElement!.innerHTML = '<svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path></svg>';
                          }}
                        />
                      ) : (
                        <Package size={20} className="text-gray-500" />
                      )}
                    </div>
                    <div className="flex-1">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {item.product.name}
                      </p>
                      <p className="text-xs text-gray-500">
                        Qty: {item.quantity} × {formatPrice(item.price)}
                      </p>
                    </div>
                  </div>
                ))}
                {order.items.length > 3 && (
                  <div className="flex items-center justify-center text-sm text-gray-500">
                    +{order.items.length - 3} more items
                  </div>
                )}
              </div>
            </div>

            {/* Quick Actions */}
            <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-200">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <ShoppingCart size={14} />
                <span>Order placed on {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}</span>
              </div>
              
              <div className="flex items-center gap-2">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => handleReorder(order)}
                >
                  Reorder
                </Button>
                
                <Link to={`/orders/${order.id}`}>
                  <Button
                    size="sm"
                    variant="primary"
                    icon={Eye}
                  >
                    View Details
                  </Button>
                </Link>
              </div>
            </div>
          </AnimatedContainer>
        ))}
      </div>

        {/* Show message if no orders match filter */}
        {filteredOrders.length === 0 && (allOrdersResponse?.orders?.length || 0) > 0 && (
          <div className="text-center py-12">
            <Package className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No {statusFilter} orders found
            </h3>
            <p className="text-gray-600">
              Try changing the filter to see more orders.
            </p>
          </div>
        )}
      </AsyncStateWrapper>
    </div>
  );
};

export default Orders;