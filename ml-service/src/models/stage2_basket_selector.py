# ml-service/src/models/stage2_basket_selector.py

import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
import joblib
import os
import logging

logger = logging.getLogger(__name__)

class BasketSelector:
    """
    Stage 2 Model: Uses GradientBoostingClassifier to select the best basket
    from the candidates generated by Stage 1, based on their meta-features.
    """
    def __init__(self):
        self.model = GradientBoostingClassifier(
            n_estimators=100,
            max_depth=5,
            learning_rate=0.05
        )

    def train(self, X_meta_features: pd.DataFrame, y_best_basket_index: pd.Series):
        """Trains the Gradient Boosting model."""
        logger.info("--- Training Stage 2: Basket Selector (Gradient Boosting) ---")
        self.model.fit(X_meta_features, y_best_basket_index)
        logger.info("--- Stage 2 Training Complete ---")

    def predict(self, X_meta_features: pd.DataFrame) -> int:
        """Predicts the index of the best basket."""
        prediction = self.model.predict(X_meta_features)
        return int(prediction[0])

    def save(self, path: str = ".", filename: str = "stage2_gbc.pkl"):
        """Saves the trained model to a file."""
        os.makedirs(path, exist_ok=True)
        joblib.dump(self.model, os.path.join(path, filename))
        logger.info(f"Stage 2 model saved to {os.path.join(path, filename)}")

    def load(self, path: str):
        """Loads a trained model from a file."""
        self.model = joblib.load(path)
        logger.info(f"Stage 2 model loaded from {path}")